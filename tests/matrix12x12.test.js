import { performance } from "perf_hooks"
import {
  transposeJS,
  adjointJS,
  inverseJS,
} from "../src/matrixCalculation/matrixJS.js"
import {
  transposeWASM,
  adjointWASM,
  inverseWASM,
} from "../src/matrixCalculation/matrixWASM.js"

// The tests for calculating the matrix adjoint and inverse
// are skipped because they take too long ~ 50 min.

const inputMatrix = [
  [3, 33, 13, 34, 15, 4, 20, 28, 12, 20, 22, 36],
  [5, 48, 50, 44, 17, 43, 28, 12, 40, 6, 40, 6],
  [1, 5, 50, 50, 8, 37, 29, 6, 7, 43, 1, 43],
  [22, 48, 30, 10, 45, 31, 33, 45, 12, 33, 37, 14],
  [30, 16, 14, 31, 41, 0, 27, 10, 1, 30, 46, 12],
  [43, 42, 39, 31, 38, 7, 1, 10, 11, 31, 39, 15],
  [44, 8, 40, 41, 7, 6, 24, 20, 39, 30, 14, 48],
  [25, 41, 47, 8, 18, 20, 30, 36, 20, 40, 29, 44],
  [44, 45, 44, 42, 12, 49, 15, 22, 0, 14, 26, 15],
  [39, 20, 33, 25, 39, 14, 39, 38, 23, 24, 46, 20],
  [13, 29, 35, 19, 30, 29, 44, 30, 8, 35, 13, 0],
  [21, 7, 45, 9, 19, 9, 50, 41, 32, 24, 37, 48],
]

const transposeMatrix = [
  [3, 5, 1, 22, 30, 43, 44, 25, 44, 39, 13, 21],
  [33, 48, 5, 48, 16, 42, 8, 41, 45, 20, 29, 7],
  [13, 50, 50, 30, 14, 39, 40, 47, 44, 33, 35, 45],
  [34, 44, 50, 10, 31, 31, 41, 8, 42, 25, 19, 9],
  [15, 17, 8, 45, 41, 38, 7, 18, 12, 39, 30, 19],
  [4, 43, 37, 31, 0, 7, 6, 20, 49, 14, 29, 9],
  [20, 28, 29, 33, 27, 1, 24, 30, 15, 39, 44, 50],
  [28, 12, 6, 45, 10, 10, 20, 36, 22, 38, 30, 41],
  [12, 40, 7, 12, 1, 11, 39, 20, 0, 23, 8, 32],
  [20, 6, 43, 33, 30, 31, 30, 40, 14, 24, 35, 24],
  [22, 40, 1, 37, 46, 39, 14, 29, 26, 46, 13, 37],
  [36, 6, 43, 14, 12, 15, 48, 44, 15, 20, 0, 48],
]

const adjointMatrix = [
  [
    29803783903412732, 14132027813362828, 38072409669142050, -45852727844537990,
    -42854783553459790, 2619863328120504, -59980422712407720, 43229103347485190,
    -40352060679303360, 102962859825084820, -10253556720550844,
    -44894602167475520,
  ],
  [
    -17991285897365634, -7489797234967407, 59614998914314670,
    -66830095901578770, -51836160323131450, -26546110330735016,
    -46967992655814380, 67977317575035020, -34450413577238308,
    220454288143104130, -40628648153051690, -94663350857621180,
  ],
  [
    -8876243860831161, 9303532232844016, -14190376207812372, 74937319007447800,
    68929595893654580, -84279610020324450, 58079215140983080, 14832309712288432,
    -1435803515529162, -34411401183859684, -41472551626135630,
    -51434012118587820,
  ],
  [
    -46447541533671680, -363115493624004, -22699329452501064, 72217392204561440,
    34085610079816252, -40243863962289, 23922351695791692, -15674602772752184,
    7439212607378559, -118629150723131230, -10333689364097700,
    63193722223422720,
  ],
  [
    19592040690649292, 19413042685251490, 24447554441125164,
    -235911891888470700, -46029690476913790, -98914702824411730,
    -83286930294568020, 275986464071321400, -29039656347887690,
    351795471704870660, -7558341774991319, -235002908360281470,
  ],
  [
    50144455398184024, -14983292841261604, -27715313335630984,
    -86281308064947890, -23419612074848364, 59886099032263860,
    -24582480308910824, -5262564654916359, -11692557001408052, 5734428385778764,
    62186921297728490, 32069826987878228,
  ],
  [
    9809316331905768, -2717399642222658, 67132315497805450, -79106884585247060,
    -107768836462267470, 6218859859493946, -69002633858038740,
    123137435312389040, -51853546867120050, 289756962762101440,
    -70849451595289590, -167486204446815260,
  ],
  [
    -57522140256631600, 21248890338796344, -50247798830011050,
    153384483837264960, 141983112895430910, 22862448041512300,
    99431972974317840, -147222568843536000, 42188577295095336,
    -383853613087655800, 10054448521546968, 180398836176705900,
  ],
  [
    24552892148796110, -34531718518960988, 1986764152487529, -32227614978739640,
    8123103259546623, 29322446386911748, -49066295667012300, -23852969271498580,
    43678523066523380, -33835070892288384, 25119765044433664, 53707592120723050,
  ],
  [
    10498216580668732, -9538913995667232, -61078233068223410,
    151970850680414560, 35419681341773156, 81890228954300740, 58843186744527540,
    -259112330270314300, 79806140504971280, -342253905249398660,
    22880186377102170, 265606994888163650,
  ],
  [
    1208697604814982, -26222911661335132, -42311714359897256,
    148980451474105900, 18301507437522670, 65910254899243500, 96322725978671200,
    -201786789414941760, 39698180818914380, -305971686236213400,
    62975016489531860, 175381640416992030,
  ],
  [
    5823747729068218, 14065188505687750, 22548919454694196, -162380692922543550,
    -68343569554352280, -27635662973849610, -72280043822048080,
    150436272241924260, -45328254763121144, 292561872965756500,
    31044314239525772, -176141003116536960,
  ],
]

const inverseMatrix = [
  [
    -0.012533, -0.005943, -0.01601, 0.019282, 0.018021, -0.001102, 0.025223,
    -0.018178, 0.016969, -0.043297, 0.004312, 0.018879,
  ],
  [
    0.007566, 0.00315, -0.025069, 0.028103, 0.021798, 0.011163, 0.019751,
    -0.028585, 0.014487, -0.092704, 0.017085, 0.039807,
  ],
  [
    0.003733, -0.003912, 0.005967, -0.031512, -0.028986, 0.035441, -0.024423,
    -0.006237, 0.000604, 0.01447, 0.01744, 0.021629,
  ],
  [
    0.019532, 0.000153, 0.009545, -0.030368, -0.014333, 0.000017, -0.01006,
    0.006591, -0.003128, 0.049885, 0.004345, -0.026574,
  ],
  [
    -0.008239, -0.008163, -0.010281, 0.099204, 0.019356, 0.041595, 0.035023,
    -0.116056, 0.012212, -0.147935, 0.003178, 0.098822,
  ],
  [
    -0.021086, 0.006301, 0.011655, 0.036283, 0.009848, -0.025183, 0.010337,
    0.002213, 0.004917, -0.002411, -0.026151, -0.013486,
  ],
  [
    -0.004125, 0.001143, -0.02823, 0.033266, 0.045318, -0.002615, 0.029017,
    -0.051781, 0.021805, -0.121847, 0.029793, 0.07043,
  ],
  [
    0.024189, -0.008935, 0.02113, -0.0645, -0.059706, -0.009614, -0.041813,
    0.061909, -0.017741, 0.161416, -0.004228, -0.07586,
  ],
  [
    -0.010325, 0.014521, -0.000835, 0.013552, -0.003416, -0.012331, 0.020633,
    0.010031, -0.018367, 0.014228, -0.010563, -0.022585,
  ],
  [
    -0.004415, 0.004011, 0.025684, -0.063906, -0.014894, -0.034436, -0.024744,
    0.108961, -0.03356, 0.143923, -0.009621, -0.111692,
  ],
  [
    -0.000508, 0.011027, 0.017793, -0.062648, -0.007696, -0.027716, -0.040505,
    0.084854, -0.016694, 0.128666, -0.026482, -0.073751,
  ],
  [
    -0.002449, -0.005915, -0.009482, 0.068283, 0.028739, 0.011621, 0.030395,
    -0.063261, 0.019061, -0.123027, -0.013055, 0.07407,
  ],
]

describe("Matrix 12x12", () => {
  test("transpose JavaScript", () => {
    const startTransposeJs = performance.now()
    const result = transposeJS(inputMatrix)
    const endTransposeJs = performance.now()

    console.log(
      `Execution time of matrix transpose JavaScript is: ${
        endTransposeJs - startTransposeJs
      } ms`
    )

    expect(result).toEqual(transposeMatrix)
  })

  test("transpose WASM", () => {
    const startTransposeWasm = performance.now()
    const result = transposeWASM(inputMatrix)
    const endTransposeWasm = performance.now()

    console.log(
      `Execution time of matrix transpose WASM is: ${
        endTransposeWasm - startTransposeWasm
      } ms`
    )

    expect(result).toEqual(transposeMatrix)
  })

  test("adjoint JavaScript", () => {
    const startAdjointJs = performance.now()
    const result = adjointJS(inputMatrix)
    const endAdjointJs = performance.now()

    console.log(
      `Execution time of matrix adjoint JavaScript is: ${
        endAdjointJs - startAdjointJs
      } ms`
    )

    // Use toBeCloseTo as the number is big
    // and there can be small inaccuracy (-2 for a last two digits)
    for (let i = 0; i < result.length; i++) {
      for (let j = 0; j < result[i].length; j++) {
        expect(result[i][j]).toBeCloseTo(adjointMatrix[i][j], -2)
      }
    }
  })

  test("adjoint WASM", () => {
    const startAdjointWasm = performance.now()
    const result = adjointWASM(inputMatrix)
    const endAdjointWasm = performance.now()

    console.log(
      `Execution time of matrix adjoint WASM is: ${
        endAdjointWasm - startAdjointWasm
      } ms`
    )

    // Use toBeCloseTo as the number is big
    // and there can be small inaccuracy
    for (let i = 0; i < result.length; i++) {
      for (let j = 0; j < result[i].length; j++) {
        expect(result[i][j]).toBeCloseTo(adjointMatrix[i][j])
      }
    }
  })

  test("inverse JavaScript", () => {
    const startInverseJS = performance.now()
    const result = inverseJS(inputMatrix)
    const endInverseJs = performance.now()

    console.log(
      `Execution time of matrix inverse JavaScript is: ${
        endInverseJs - startInverseJS
      } ms`
    )

    for (let i = 0; i < result.length; i++) {
      for (let j = 0; j < result[i].length; j++) {
        expect(result[i][j]).toBeCloseTo(inverseMatrix[i][j])
      }
    }
  })

  test("inverse WASM", () => {
    const startInverseWasm = performance.now()
    const result = inverseWASM(inputMatrix)
    const endInverseWasm = performance.now()

    console.log(
      `Execution time of matrix inverse WASM is: ${
        endInverseWasm - startInverseWasm
      } ms`
    )

    for (let i = 0; i < result.length; i++) {
      for (let j = 0; j < result[i].length; j++) {
        expect(result[i][j]).toBeCloseTo(inverseMatrix[i][j])
      }
    }
  })
})
